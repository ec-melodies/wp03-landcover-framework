#######################################################
# 
# landCoverDataProcess.py
# Python implementation of the Class LandCoverDataProcess
# Generated by Enterprise Architect
# Created on:      24-May-2016 12:58:29
# Original author: Jane
# 
#######################################################

import configFileManager
import configuration
import webpageAccess

"""
NAME
    LandCoverDataProcess - implementation of class
FILE
    landCoverDataProcess.py
CLASSES
    landCoverDataProcess
"""

class LandCoverDataProcess:
    # TODO Allow product to be specified in different ways (Terra/Aqua/MOD/MYD/combined).
    """
    Manager class to organise all the tasks.

    Will need to know location of any XML config file, and/or tile, datetime and
    product.


    Methods defined here:
        set_args(...)
            Set up the data file identifiers.

        read_config(...)
            Restore data file identifiers from user's file.

        download_data_files(...)
            Retrieves all data files specified.

    ----------------------------------------------------------------------
    No data or other attributes defined here.

    """
    def __init__(self):
        """
        Initialise all managed objects
        :return:
        """
        self.m_ConfigFileManager= configFileManager.ConfigFileManager()
        self.m_Configuration = configuration.Configuration(self.m_ConfigFileManager)
        self.m_WebpageAccess = webpageAccess.WebpageAccess()

    def set_args(self, product, year, tile, DoY):
        """
        Set up the data file identifiers: properties for retrieving required data file.

        This is delegated to the Configuration class.

        :param product: MOD* and MYD* supported
        :param year: valid year in data archive
        :param tile: valid tile in data archive
        :param DoY: starting day of year, and optionally also end
        :return: no return
        """
        self.m_Configuration.set_args(product, year, tile, DoY)

    def read_config(self):
        """
        Restore data file identifiers from user's file.

        This is delegated to the Configuration class.
        :return: no return
        :raise: IOError if the default config. file is not found.
        """
        try:
            self.m_Configuration.get_config()
        except IOError as io_err:
            print("Exception: {}: {}".format(io_err.strerror, io_err.filename))
            raise IOError
        except Exception as err:
            raise Exception(err.strerror)


    def download_data_files(self):
        """
        Retrieves all data files specified.

        :return: no return
        """
        # while DoY not at the finish
        while self.m_Configuration.is_valid_day():
            # convert the args to a filename string - use config class
            filename = self.m_Configuration.create_filename()

            # TODO check whether the file has already been downloaded

            if True:
                # create string for web page listing of file
                web_page = self.m_Configuration.create_URL()
                # delegate to WebpageAccess class: scrape page for string and get file
                # TODO use real website --->
                # self.m_WebpageAccess.retrieve_data_files(web_page, self.m_Configuration.get_tile(), filename)
                # TODO FIRST TRY A TEST WEBSITE
                self.m_WebpageAccess.retrieve_data_files(
                    "http://?????",
                    self.m_Configuration.get_tile(), filename)

        # increment to next DoY
        self.m_Configuration.next_day()


